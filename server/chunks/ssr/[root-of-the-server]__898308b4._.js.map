{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["file:///F:/projects/break-message/break-message-site/src/components/TextAreaWithCounter/CopyButton.tsx"],"sourcesContent":["import { useState } from 'react';\r\nimport { FiCopy, FiCheck } from 'react-icons/fi';\r\n\r\ninterface CopyButtonProps {\r\n    onClick: () => void;\r\n    disabled: boolean;\r\n}\r\n\r\nconst CopyButton = ({ onClick, disabled }: CopyButtonProps) => {\r\n    const [showTooltip, setShowTooltip] = useState(false);\r\n\r\n    const handleClick = () => {\r\n        onClick();\r\n        setShowTooltip(true);\r\n        setTimeout(() => setShowTooltip(false), 2000);\r\n    };\r\n\r\n    return (\r\n        <div className=\"relative\">\r\n            <button\r\n                onClick={handleClick}\r\n                disabled={disabled}\r\n                className={`p-1 rounded-md transition-colors ${\r\n                    disabled \r\n                        ? 'text-gray-400 cursor-not-allowed' \r\n                        : 'text-gray-600 hover:text-blue-600 hover:bg-gray-100'\r\n                }`}\r\n                aria-label=\"Копировать текст\"\r\n            >\r\n                {showTooltip ? (\r\n                    <FiCheck className=\"w-5 h-5 text-green-500\" />\r\n                ) : (\r\n                    <FiCopy className=\"w-5 h-5\" />\r\n                )}\r\n            </button>\r\n            \r\n            {showTooltip && (\r\n                <div className=\"absolute z-10 top-full right-0 mt-2 px-3 py-1 bg-gray-800 text-white text-sm rounded-md whitespace-nowrap\">\r\n                    Скопировано!\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CopyButton;"],"names":[],"mappings":";;;;AAAA;AACA;;;;AAOA,MAAM,aAAa,CAAC,EAAE,OAAO,EAAE,QAAQ,EAAmB;IACtD,MAAM,CAAC,aAAa,eAAe,GAAG,CAAA,GAAA,mGAAA,CAAA,WAAQ,AAAD,EAAE;IAE/C,MAAM,cAAc;QAChB;QACA,eAAe;QACf,WAAW,IAAM,eAAe,QAAQ;IAC5C;IAEA,qBACI,qKAAC;QAAI,WAAU;;0BACX,qKAAC;gBACG,SAAS;gBACT,UAAU;gBACV,WAAW,CAAC,iCAAiC,EACzC,WACM,qCACA,uDACR;gBACF,cAAW;0BAEV,4BACG,qKAAC,uIAAA,CAAA,UAAO;oBAAC,WAAU;;;;;6EAEnB,qKAAC,uIAAA,CAAA,SAAM;oBAAC,WAAU;;;;;;;;;;;YAIzB,6BACG,qKAAC;gBAAI,WAAU;0BAA4G;;;;;;;;;;;;AAM3I;uCAEe","debugId":null}},
    {"offset": {"line": 67, "column": 0}, "map": {"version":3,"sources":["file:///F:/projects/break-message/break-message-site/src/components/TextAreaWithCounter/SplitButton.tsx"],"sourcesContent":["import { useState } from 'react';\r\nimport { FiDivide } from 'react-icons/fi';\r\n\r\ninterface SplitButtonProps {\r\n    onClick: () => void;\r\n    disabled: boolean;\r\n}\r\n\r\nconst SplitButton = ({ onClick, disabled }: SplitButtonProps) => {\r\n    const [showTooltip, setShowTooltip] = useState(false);\r\n\r\n    const handleClick = () => {\r\n        onClick();\r\n        setShowTooltip(true);\r\n        setTimeout(() => setShowTooltip(false), 2000);\r\n    };\r\n\r\n    return (\r\n        <div className=\"relative\">\r\n            <button\r\n                onClick={handleClick}\r\n                disabled={disabled}\r\n                className={`p-1 rounded-md transition-colors ${\r\n                    disabled \r\n                        ? 'text-gray-400 cursor-not-allowed' \r\n                        : 'text-gray-600 hover:text-blue-600 hover:bg-gray-100'\r\n                }`}\r\n                aria-label=\"Разбить текст\"\r\n            >\r\n                <FiDivide className=\"w-5 h-5\" />\r\n            </button>\r\n            \r\n            {showTooltip && (\r\n                <div className=\"absolute z-10 top-full right-0 mt-2 px-3 py-1 bg-gray-800 text-white text-sm rounded-md whitespace-nowrap\">\r\n                    Текст разбит!\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SplitButton;"],"names":[],"mappings":";;;;AAAA;AACA;;;;AAOA,MAAM,cAAc,CAAC,EAAE,OAAO,EAAE,QAAQ,EAAoB;IACxD,MAAM,CAAC,aAAa,eAAe,GAAG,CAAA,GAAA,mGAAA,CAAA,WAAQ,AAAD,EAAE;IAE/C,MAAM,cAAc;QAChB;QACA,eAAe;QACf,WAAW,IAAM,eAAe,QAAQ;IAC5C;IAEA,qBACI,qKAAC;QAAI,WAAU;;0BACX,qKAAC;gBACG,SAAS;gBACT,UAAU;gBACV,WAAW,CAAC,iCAAiC,EACzC,WACM,qCACA,uDACR;gBACF,cAAW;0BAEX,cAAA,qKAAC,uIAAA,CAAA,WAAQ;oBAAC,WAAU;;;;;;;;;;;YAGvB,6BACG,qKAAC;gBAAI,WAAU;0BAA4G;;;;;;;;;;;;AAM3I;uCAEe","debugId":null}},
    {"offset": {"line": 123, "column": 0}, "map": {"version":3,"sources":["file:///F:/projects/break-message/break-message-site/src/components/TextAreaWithCounter/ClearButton.tsx"],"sourcesContent":["import { useState } from 'react';\r\nimport { FiTrash2 } from 'react-icons/fi';\r\n\r\ninterface ClearButtonProps {\r\n    onClick: () => void;\r\n    disabled: boolean;\r\n}\r\n\r\nconst ClearButton = ({ onClick, disabled }: ClearButtonProps) => {\r\n    const [showTooltip, setShowTooltip] = useState(false);\r\n\r\n    const handleClick = () => {\r\n        onClick();\r\n        setShowTooltip(true);\r\n        setTimeout(() => setShowTooltip(false), 2000);\r\n    };\r\n\r\n    return (\r\n        <div className=\"relative\">\r\n            <button\r\n                onClick={handleClick}\r\n                disabled={disabled}\r\n                className={`p-1 rounded-md transition-colors ${\r\n                    disabled \r\n                        ? 'text-gray-400 cursor-not-allowed' \r\n                        : 'text-gray-600 hover:text-red-600 hover:bg-gray-100'\r\n                }`}\r\n                aria-label=\"Очистить\"\r\n            >\r\n                <FiTrash2 className=\"w-5 h-5\" />\r\n            </button>\r\n            \r\n            {showTooltip && (\r\n                <div className=\"absolute z-10 top-full right-0 mt-2 px-3 py-1 bg-gray-800 text-white text-sm rounded-md whitespace-nowrap\">\r\n                    Очищено!\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ClearButton;"],"names":[],"mappings":";;;;AAAA;AACA;;;;AAOA,MAAM,cAAc,CAAC,EAAE,OAAO,EAAE,QAAQ,EAAoB;IACxD,MAAM,CAAC,aAAa,eAAe,GAAG,CAAA,GAAA,mGAAA,CAAA,WAAQ,AAAD,EAAE;IAE/C,MAAM,cAAc;QAChB;QACA,eAAe;QACf,WAAW,IAAM,eAAe,QAAQ;IAC5C;IAEA,qBACI,qKAAC;QAAI,WAAU;;0BACX,qKAAC;gBACG,SAAS;gBACT,UAAU;gBACV,WAAW,CAAC,iCAAiC,EACzC,WACM,qCACA,sDACR;gBACF,cAAW;0BAEX,cAAA,qKAAC,uIAAA,CAAA,WAAQ;oBAAC,WAAU;;;;;;;;;;;YAGvB,6BACG,qKAAC;gBAAI,WAAU;0BAA4G;;;;;;;;;;;;AAM3I;uCAEe","debugId":null}},
    {"offset": {"line": 179, "column": 0}, "map": {"version":3,"sources":["file:///F:/projects/break-message/break-message-site/src/components/TextAreaWithCounter/ChunkList.tsx"],"sourcesContent":["import { useRef, useCallback, useEffect } from 'react';\r\nimport CopyButton from './CopyButton';\r\n\r\ninterface ChunkListProps {\r\n    chunks: string[];\r\n    splitLength: number;\r\n}\r\n\r\nconst ChunkList = ({ chunks, splitLength }: ChunkListProps) => {\r\n    const chunkRefs = useRef<(HTMLTextAreaElement | null)[]>([]);\r\n\r\n    const setChunkRef = useCallback((el: HTMLTextAreaElement | null, index: number) => {\r\n        chunkRefs.current[index] = el;\r\n        // Обновляем высоту при установке ref\r\n        if (el) {\r\n            el.style.height = 'auto';\r\n            el.style.height = `${el.scrollHeight}px`;\r\n        }\r\n    }, []);\r\n\r\n    // Эффект для обновления высоты при изменении chunks\r\n    useEffect(() => {\r\n        chunkRefs.current.forEach((textarea) => {\r\n            if (textarea) {\r\n                textarea.style.height = 'auto';\r\n                textarea.style.height = `${textarea.scrollHeight}px`;\r\n            }\r\n        });\r\n    }, [chunks]);\r\n\r\n    if (chunks.length === 0) return null;\r\n\r\n    return (\r\n        <div className=\"mt-4 space-y-3\">\r\n            <h3 className=\"font-medium\">Разбитый текст (по {splitLength} символов):</h3>\r\n            {chunks.map((chunk, index) => (\r\n                <div\r\n                    key={index}\r\n                    className=\"relative\"\r\n                >\r\n                    <textarea\r\n                        ref={(el) => setChunkRef(el, index)}\r\n                        value={chunk}\r\n                        className=\"w-full p-3 pr-28 border border-gray-300 rounded-md bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 resize-none overflow-hidden\"\r\n                        style={{\r\n                            minHeight: '44px', \r\n                            transition: 'height 0.2s ease-out'\r\n                        }}\r\n                    />\r\n                    <div className=\"absolute right-2 top-2\">\r\n                        <CopyButton\r\n                            onClick={() => navigator.clipboard.writeText(chunk)}\r\n                            disabled={false}\r\n                        />\r\n                    </div>\r\n                    <div className=\"text-xs text-gray-500 mt-1\">\r\n                        Блок {index + 1} из {chunks.length} ({chunk.length} символов)\r\n                    </div>\r\n                </div>\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChunkList;"],"names":[],"mappings":";;;;AAAA;AACA;;;;AAOA,MAAM,YAAY,CAAC,EAAE,MAAM,EAAE,WAAW,EAAkB;IACtD,MAAM,YAAY,CAAA,GAAA,mGAAA,CAAA,SAAM,AAAD,EAAkC,EAAE;IAE3D,MAAM,cAAc,CAAA,GAAA,mGAAA,CAAA,cAAW,AAAD,EAAE,CAAC,IAAgC;QAC7D,UAAU,OAAO,CAAC,MAAM,GAAG;QAC3B,qCAAqC;QACrC,IAAI,IAAI;YACJ,GAAG,KAAK,CAAC,MAAM,GAAG;YAClB,GAAG,KAAK,CAAC,MAAM,GAAG,GAAG,GAAG,YAAY,CAAC,EAAE,CAAC;QAC5C;IACJ,GAAG,EAAE;IAEL,oDAAoD;IACpD,CAAA,GAAA,mGAAA,CAAA,YAAS,AAAD,EAAE;QACN,UAAU,OAAO,CAAC,OAAO,CAAC,CAAC;YACvB,IAAI,UAAU;gBACV,SAAS,KAAK,CAAC,MAAM,GAAG;gBACxB,SAAS,KAAK,CAAC,MAAM,GAAG,GAAG,SAAS,YAAY,CAAC,EAAE,CAAC;YACxD;QACJ;IACJ,GAAG;QAAC;KAAO;IAEX,IAAI,OAAO,MAAM,KAAK,GAAG,OAAO;IAEhC,qBACI,qKAAC;QAAI,WAAU;;0BACX,qKAAC;gBAAG,WAAU;;oBAAc;oBAAoB;oBAAY;;;;;;;YAC3D,OAAO,GAAG,CAAC,CAAC,OAAO,sBAChB,qKAAC;oBAEG,WAAU;;sCAEV,qKAAC;4BACG,KAAK,CAAC,KAAO,YAAY,IAAI;4BAC7B,OAAO;4BACP,WAAU;4BACV,OAAO;gCACH,WAAW;gCACX,YAAY;4BAChB;;;;;;sCAEJ,qKAAC;4BAAI,WAAU;sCACX,cAAA,qKAAC,gJAAA,CAAA,UAAU;gCACP,SAAS,IAAM,UAAU,SAAS,CAAC,SAAS,CAAC;gCAC7C,UAAU;;;;;;;;;;;sCAGlB,qKAAC;4BAAI,WAAU;;gCAA6B;gCAClC,QAAQ;gCAAE;gCAAK,OAAO,MAAM;gCAAC;gCAAG,MAAM,MAAM;gCAAC;;;;;;;;mBAnBlD;;;;;;;;;;;AAyBzB;uCAEe","debugId":null}},
    {"offset": {"line": 290, "column": 0}, "map": {"version":3,"sources":["file:///F:/projects/break-message/break-message-site/src/components/TextAreaWithCounter/SettingsPanel.tsx"],"sourcesContent":["import { useState } from 'react';\r\n\r\ntype SplitMode = 'chars' | 'words' | 'sentences';\r\n\r\ninterface SettingsPanelProps {\r\n    splitLength: number;\r\n    setSplitLength: (value: number) => void;\r\n    splitMode: SplitMode;\r\n    setSplitMode: (mode: SplitMode) => void;\r\n    onClose: () => void;\r\n}\r\n\r\nconst SettingsPanel = ({\r\n    splitLength,\r\n    setSplitLength,\r\n    splitMode,\r\n    setSplitMode,\r\n    onClose\r\n}: SettingsPanelProps) => {\r\n    const [localLength, setLocalLength] = useState(splitLength);\r\n    const [localMode, setLocalMode] = useState<SplitMode>(splitMode);\r\n\r\n    const handleApply = () => {\r\n        setSplitLength(localLength);\r\n        setSplitMode(localMode);\r\n        onClose();\r\n    };\r\n\r\n    const getModeDescription = () => {\r\n        switch (localMode) {\r\n            case 'chars': return 'Текст будет разбит строго по указанному количеству символов';\r\n            case 'words': return 'Текст будет разбит по словам, сохраняя их целостность';\r\n            case 'sentences': return 'Текст будет разбит по предложениям (по знакам .!?)';\r\n            default: return '';\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"mb-2 p-4 border border-gray-200 rounded-md bg-white shadow-lg\">\r\n            <div className=\"flex justify-between items-center mb-2\">\r\n                <h3 className=\"font-medium\">Настройки разбивки</h3>\r\n                <button onClick={onClose} className=\"text-gray-500 hover:text-gray-700 text-xl\">\r\n                    &times;\r\n                </button>\r\n            </div>\r\n            <div className=\"space-y-4\">\r\n                <div>\r\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                        Тип разбивки:\r\n                    </label>\r\n                    <div className=\"grid grid-cols-3 gap-2\">\r\n                        <label className=\"inline-flex items-center p-2 border rounded-md hover:bg-gray-50\">\r\n                            <input\r\n                                type=\"radio\"\r\n                                className=\"form-radio text-blue-600\"\r\n                                checked={localMode === 'chars'}\r\n                                onChange={() => setLocalMode('chars')}\r\n                            />\r\n                            <span className=\"ml-2\">По символам</span>\r\n                        </label>\r\n                        <label className=\"inline-flex items-center p-2 border rounded-md hover:bg-gray-50\">\r\n                            <input\r\n                                type=\"radio\"\r\n                                className=\"form-radio text-blue-600\"\r\n                                checked={localMode === 'words'}\r\n                                onChange={() => setLocalMode('words')}\r\n                            />\r\n                            <span className=\"ml-2\">По словам</span>\r\n                        </label>\r\n                        <label className=\"inline-flex items-center p-2 border rounded-md hover:bg-gray-50\">\r\n                            <input\r\n                                type=\"radio\"\r\n                                className=\"form-radio text-blue-600\"\r\n                                checked={localMode === 'sentences'}\r\n                                onChange={() => setLocalMode('sentences')}\r\n                            />\r\n                            <span className=\"ml-2\">По предложениям</span>\r\n                        </label>\r\n                    </div>\r\n                    <p className=\"mt-1 text-xs text-gray-500\">\r\n                        {getModeDescription()}\r\n                    </p>\r\n                </div>\r\n                \r\n                <div>\r\n                    <label htmlFor=\"splitLength\" className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                        {localMode === 'chars' ? 'Символов в блоке:' : \r\n                         localMode === 'words' ? 'Макс. символов в блоке:' : \r\n                         'Макс. длина блока:'}\r\n                    </label>\r\n                    <input\r\n                        id=\"splitLength\"\r\n                        type=\"number\"\r\n                        min=\"10\"\r\n                        max=\"500\"\r\n                        value={localLength}\r\n                        onChange={(e) => setLocalLength(Number(e.target.value))}\r\n                        className=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500\"\r\n                    />\r\n                </div>\r\n                \r\n                <div className=\"flex justify-end space-x-2\">\r\n                    <button\r\n                        onClick={onClose}\r\n                        className=\"px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50\"\r\n                    >\r\n                        Отмена\r\n                    </button>\r\n                    <button\r\n                        onClick={handleApply}\r\n                        className=\"px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\"\r\n                    >\r\n                        Применить\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SettingsPanel;"],"names":[],"mappings":";;;;AAAA;;;AAYA,MAAM,gBAAgB,CAAC,EACnB,WAAW,EACX,cAAc,EACd,SAAS,EACT,YAAY,EACZ,OAAO,EACU;IACjB,MAAM,CAAC,aAAa,eAAe,GAAG,CAAA,GAAA,mGAAA,CAAA,WAAQ,AAAD,EAAE;IAC/C,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,mGAAA,CAAA,WAAQ,AAAD,EAAa;IAEtD,MAAM,cAAc;QAChB,eAAe;QACf,aAAa;QACb;IACJ;IAEA,MAAM,qBAAqB;QACvB,OAAQ;YACJ,KAAK;gBAAS,OAAO;YACrB,KAAK;gBAAS,OAAO;YACrB,KAAK;gBAAa,OAAO;YACzB;gBAAS,OAAO;QACpB;IACJ;IAEA,qBACI,qKAAC;QAAI,WAAU;;0BACX,qKAAC;gBAAI,WAAU;;kCACX,qKAAC;wBAAG,WAAU;kCAAc;;;;;;kCAC5B,qKAAC;wBAAO,SAAS;wBAAS,WAAU;kCAA4C;;;;;;;;;;;;0BAIpF,qKAAC;gBAAI,WAAU;;kCACX,qKAAC;;0CACG,qKAAC;gCAAM,WAAU;0CAA+C;;;;;;0CAGhE,qKAAC;gCAAI,WAAU;;kDACX,qKAAC;wCAAM,WAAU;;0DACb,qKAAC;gDACG,MAAK;gDACL,WAAU;gDACV,SAAS,cAAc;gDACvB,UAAU,IAAM,aAAa;;;;;;0DAEjC,qKAAC;gDAAK,WAAU;0DAAO;;;;;;;;;;;;kDAE3B,qKAAC;wCAAM,WAAU;;0DACb,qKAAC;gDACG,MAAK;gDACL,WAAU;gDACV,SAAS,cAAc;gDACvB,UAAU,IAAM,aAAa;;;;;;0DAEjC,qKAAC;gDAAK,WAAU;0DAAO;;;;;;;;;;;;kDAE3B,qKAAC;wCAAM,WAAU;;0DACb,qKAAC;gDACG,MAAK;gDACL,WAAU;gDACV,SAAS,cAAc;gDACvB,UAAU,IAAM,aAAa;;;;;;0DAEjC,qKAAC;gDAAK,WAAU;0DAAO;;;;;;;;;;;;;;;;;;0CAG/B,qKAAC;gCAAE,WAAU;0CACR;;;;;;;;;;;;kCAIT,qKAAC;;0CACG,qKAAC;gCAAM,SAAQ;gCAAc,WAAU;0CAClC,cAAc,UAAU,sBACxB,cAAc,UAAU,4BACxB;;;;;;0CAEL,qKAAC;gCACG,IAAG;gCACH,MAAK;gCACL,KAAI;gCACJ,KAAI;gCACJ,OAAO;gCACP,UAAU,CAAC,IAAM,eAAe,OAAO,EAAE,MAAM,CAAC,KAAK;gCACrD,WAAU;;;;;;;;;;;;kCAIlB,qKAAC;wBAAI,WAAU;;0CACX,qKAAC;gCACG,SAAS;gCACT,WAAU;0CACb;;;;;;0CAGD,qKAAC;gCACG,SAAS;gCACT,WAAU;0CACb;;;;;;;;;;;;;;;;;;;;;;;;AAOrB;uCAEe","debugId":null}},
    {"offset": {"line": 538, "column": 0}, "map": {"version":3,"sources":["file:///F:/projects/break-message/break-message-site/src/components/TextAreaWithCounter/index.tsx"],"sourcesContent":["import { useState, useRef, useEffect, useCallback } from 'react';\r\nimport CopyButton from './CopyButton';\r\nimport SplitButton from './SplitButton';\r\nimport ClearButton from './ClearButton';\r\nimport ChunkList from './ChunkList';\r\nimport SettingsPanel from './SettingsPanel';\r\n\r\ntype SplitMode = 'chars' | 'words' | 'sentences';\r\n\r\nconst TextAreaWithCounter = () => {\r\n    const [text, setText] = useState('');\r\n    const [splitTexts, setSplitTexts] = useState<string[]>([]);\r\n    const [splitLength, setSplitLength] = useState(80);\r\n    const [splitMode, setSplitMode] = useState<SplitMode>('chars');\r\n    const [showSettings, setShowSettings] = useState(false);\r\n    const textareaRef = useRef<HTMLTextAreaElement>(null);\r\n    const settingsRef = useRef<HTMLDivElement>(null);\r\n\r\n    // Автоматическое изменение высоты textarea\r\n    useEffect(() => {\r\n        if (textareaRef.current) {\r\n            textareaRef.current.style.height = 'auto';\r\n            textareaRef.current.style.height = `${textareaRef.current.scrollHeight}px`;\r\n        }\r\n    }, [text]);\r\n\r\n    // Закрытие настроек при клике вне области\r\n    useEffect(() => {\r\n        const handleClickOutside = (event: MouseEvent) => {\r\n            if (settingsRef.current && !settingsRef.current.contains(event.target as Node)) {\r\n                setShowSettings(false);\r\n            }\r\n        };\r\n\r\n        document.addEventListener('mousedown', handleClickOutside);\r\n        return () => document.removeEventListener('mousedown', handleClickOutside);\r\n    }, []);\r\n\r\n    const handleCopy = useCallback(() => {\r\n        if (text) {\r\n            navigator.clipboard.writeText(text);\r\n        }\r\n    }, [text]);\r\n    const splitBySentences = (text: string, maxLength: number) => {\r\n        const sentenceRegex = /[^.!?]+[.!?]+/g;\r\n        const sentences = text.match(sentenceRegex) || [];\r\n        let chunks: string[] = [];\r\n        let currentChunk = '';\r\n\r\n        for (const sentence of sentences) {\r\n            if (currentChunk.length + sentence.length <= maxLength || currentChunk.length === 0) {\r\n                currentChunk += sentence;\r\n            } else {\r\n                chunks.push(currentChunk.trim());\r\n                currentChunk = sentence;\r\n            }\r\n        }\r\n\r\n        if (currentChunk) {\r\n            chunks.push(currentChunk.trim());\r\n        }\r\n\r\n        return chunks;\r\n    };\r\n\r\n    const handleSplitText = useCallback(() => {\r\n        if (!text) return;\r\n\r\n        let chunks: string[] = [];\r\n        \r\n        switch (splitMode) {\r\n            case 'chars':\r\n                // Разбивка по символам\r\n                for (let i = 0; i < text.length; i += splitLength) {\r\n                    chunks.push(text.slice(i, i + splitLength));\r\n                }\r\n                break;\r\n                \r\n            case 'words':\r\n                // Разбивка по словам\r\n                const words = text.split(' ');\r\n                let currentChunk = '';\r\n                \r\n                for (const word of words) {\r\n                    if (currentChunk.length + word.length + 1 <= splitLength || currentChunk.length === 0) {\r\n                        currentChunk += (currentChunk ? ' ' : '') + word;\r\n                    } else {\r\n                        chunks.push(currentChunk);\r\n                        currentChunk = word;\r\n                    }\r\n                }\r\n                \r\n                if (currentChunk) {\r\n                    chunks.push(currentChunk);\r\n                }\r\n                break;\r\n                \r\n            case 'sentences':\r\n                // Разбивка по предложениям\r\n                chunks = splitBySentences(text, splitLength);\r\n                break;\r\n        }\r\n\r\n        setSplitTexts(chunks);\r\n    }, [text, splitLength, splitMode]);\r\n    \r\n    const handleClear = useCallback(() => {\r\n        setText('');\r\n        setSplitTexts([]);\r\n        if (textareaRef.current) {\r\n            textareaRef.current.style.height = 'auto';\r\n        }\r\n    }, []);\r\n    const toggleSettings = () => {\r\n        setShowSettings(!showSettings);\r\n    };\r\n\r\n    return (\r\n        <div className=\"max-w-lg mx-auto p-4 bg-white rounded-lg shadow-md relative\">\r\n            {/* Панель настроек (теперь сверху) */}\r\n            {showSettings && (\r\n                <div ref={settingsRef} className=\"relative \">\r\n                    <SettingsPanel \r\n                        splitLength={splitLength}\r\n                        setSplitLength={setSplitLength}\r\n                        splitMode={splitMode}\r\n                        setSplitMode={setSplitMode}\r\n                        onClose={() => setShowSettings(false)}\r\n                    />\r\n                </div>\r\n            )}\r\n\r\n            <div className=\"relative\">\r\n                <textarea\r\n                    ref={textareaRef}\r\n                    value={text}\r\n                    onChange={(e) => setText(e.target.value)}\r\n                    className=\"w-full p-3 pr-28 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 resize-none overflow-hidden\"\r\n                    rows={1}\r\n                    placeholder=\"Введите текст...\"\r\n                />\r\n                <div className=\"absolute right-2 top-2 flex gap-1\">\r\n                    <button \r\n                        onClick={toggleSettings}\r\n                        className={`p-1 rounded-md transition-colors ${\r\n                            showSettings \r\n                                ? 'text-blue-600 bg-blue-50' \r\n                                : 'text-gray-600 hover:text-blue-600 hover:bg-gray-100'\r\n                        }`}\r\n                        aria-label=\"Настройки\"\r\n                    >\r\n                        <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z\" />\r\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\" />\r\n                        </svg>\r\n                    </button>\r\n                    <ClearButton onClick={handleClear} disabled={!text && splitTexts.length === 0} />\r\n                    <SplitButton onClick={handleSplitText} disabled={!text} />\r\n                    <CopyButton onClick={handleCopy} disabled={!text} />\r\n                </div>\r\n            </div>\r\n            <div className=\"mt-1 text-sm text-gray-500\">\r\n                {text.length} символов\r\n            </div>\r\n\r\n            <ChunkList chunks={splitTexts} splitLength={splitLength} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TextAreaWithCounter;"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 802, "column": 0}, "map": {"version":3,"sources":["file:///F:/projects/break-message/break-message-site/src/components/index.ts"],"sourcesContent":["export { default as TextAreaWithCounter } from './TextAreaWithCounter';"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 824, "column": 0}, "map": {"version":3,"sources":["file:///F:/projects/break-message/break-message-site/src/pages/index.tsx"],"sourcesContent":["import { TextAreaWithCounter } from '../components';\n\nexport default function Home() {\n  return (\n    <div className=\"p-4\">\n      <TextAreaWithCounter/>\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;AAAA;AAAA;;;AAEe,SAAS;IACtB,qBACE,qKAAC;QAAI,WAAU;kBACb,cAAA,qKAAC,6LAAA,CAAA,sBAAmB;;;;;;;;;;AAG1B","debugId":null}}]
}